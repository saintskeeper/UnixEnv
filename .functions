#!/usr/bin/env bash

#function fs() {
#	if du -b /dev/null > /dev/null 2>&1; then
#		local arg=-sbh;
#	else
#		local arg=-sh;
#	fi
#	if [[ -n "$@" ]]; then
#		du $arg -- "$@";
#	else
#		du $arg .[^.]* ./*;
#	f;
#}



function linuxls(){
# List all files colorized in long format
alias l="ls -lF ${colorflag}"

# List all files colorized in long format, excluding . and ..
alias la="ls -lAF ${colorflag}"

# List only directories
alias lsd="ls -lF ${colorflag} | grep --color=never '^d'"

# Always use color output for `ls`
alias ls="command ls ${colorflag}"

# Always use color output for `ls`
alias ls="command ls ${colorflag}"

# Always enable colored `grep` output
# Note: `GREP_OPTIONS="--color=auto"` is deprecated, hence the alias usage.
alias grep='grep --color=auto'
alias fgrep='fgrep --color=auto'
alias egrep='egrep --color=auto'
}



##################################################
#MAC FUNCTIONS
##################################################

function appstart(){
open -a $1
}

function appstop(){
killall $1
}

function simloop(){
    for i in $1;
    do $2 $1;
    done


}
#quick awk
qawk(){
    awk '{print $1}'
}

###############
# Git Functoins
###############

git-add-all(){
    git add -A
}

git-picker(){
    # 1= the branch to chechkout
    # 2 = the folder to pull into the branch
    git checkout $1 -- $2
}
updatectx(){
for cluster in "$(tkg get clusters | grep -v STATUS)"; do  echo "$cluster" | awk '{ print "tkg get credentials "$1" -n "$2}' | sh ; done
}


rmns(){
    # where does kubectl proxy go?
    kubectl proxy &
    for i in `k get ns  | grep Terminating| awk '{print $1}'`;
    do
        NAMESPACE=$i;
        # add new line to echo
        echo
        echo "\n Deleting $NAMESPACE";
        kubectl get ns $NAMESPACE -o json | jq '.spec = {"finalizers":[]}'| jq '.metadata.finalizers = []' > temp.json;
        curl -k -H "Content-Type: application/json" -X PUT --data-binary @temp.json 127.0.0.1:8001/api/v1/namespaces/$NAMESPACE/finalize

    done
    echo
    echo 'reattaching kubectl proxy'
    fg
}


konfig(){
k konfig import -s $1
}



##################
###AWS PROFILES###
##################
prep_aws_eks()  {
    unset AWS_PROFILE
    export REGION_STAKED=some-region
    export AWS_PROFILE=some-aws-profile
    kx my-eks-cluster
}




########################
# Grep stuff 
########################
grep-all(){
grep -rnw  . -e $1
}


#########################
# Docer Mac Stuff 
#########################A
linux-run(){
docker run --rm -it -v $(pwd):/tmp busybox $1 $2
}


# Tar 

simple-tar(){
    #1 = archive name 
    #2 = folder
    tar -cvf $1  -C $2
}

kustomize-auto-generate(){
BASEDIR=$(pwd)
for i in  `ll -d ./*  | awk  '{print $9}' | cut -c 3-`
do
cd $BASEDIR/$i && kustomize create --autodetect;
done
cd $BASEDIR

}

kustomize-auto-delete(){
BASEDIR=$(pwd)
for i in  `ll -d ./*  | awk  '{print $9}' | cut -c 3-`
do
cd $BASEDIR/$i && rm kustomization.yaml;
done
cd $BASEDIR
}
#Function to port forward tekton dashboard 

# tekton functions 
tkplist() {
 tkn pipelinerun list | head 
}

tkplog(){
    tkn pipelinerun logs -f
}

tekton-dashboard(){
    kubectl port-forward -n tekton-pipelines service/tekton-dashboard 9097:9097
}

gs(){
git status
}


kps(){
    kubectl get pods --sort-by=.status.startTime
 }

import-ecr(){
    cat import.txt  | awk -F '[][]' '{print $2}' |  sed  '/^$/d' >loop.txt
    for i in $(cat loop.txt); do
    echo  importing $i
    terraform import module.ecr.aws_ecr_repository.default $i
    done
}

stream-import-ecr(){
    terraform plan > /tmp/foo3
    grep created /tmp/foo3 | grep module.ecr.aws_ecr_repository |awk -F '["]' '{print "terraform import \047module.ecr.aws_ecr_repository.default[\""$2"\"]\047", $2}' >/tmp/foo.sh
    cat /tmp/foo.sh 
    bash /tmp/foo.sh
}


kaniko-build(){
    docker run \
    -v $(pwd):/workspace \
    gcr.io/kaniko-project/executor:latest \
    --dockerfile=/workspace/Dockerfile \
    --context=/workspace \
    --no-push
}

##################
# Core Dirs      #
##################
devdir () {
    cd ~/Git/Dev/$1
}